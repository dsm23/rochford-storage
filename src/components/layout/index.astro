---
import { ViewTransitions } from "astro:transitions";
import DarkMode from "~/components/dark-mode";
import { seoConfig } from "~/utils/seoConfig";

import "~/styles.css";

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link
      rel="icon"
      type="image/png"
      sizes="48x48"
      href="/maskable_icon_x48.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="72x72"
      href="/maskable_icon_x72.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="96x96"
      href="/maskable_icon_x96.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="128x128"
      href="/maskable_icon_x128.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="192x192"
      href="/maskable_icon_x192.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="384x384"
      href="/maskable_icon_x384.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="512x512"
      href="/maskable_icon_x512.png"
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={seoConfig.description} />
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body>
    <DarkMode client:only="react" />
    <slot />

    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </body>
</html>
